(self.webpackChunkx_drag_toolbox=self.webpackChunkx_drag_toolbox||[]).push([[97],{26097:(t,r,n)=>{"use strict";n.r(r),n.d(r,{generatedLayout:()=>i,ToolboxCodeLayout:()=>f});n(6059),n(66108),n(50110),n(39115),n(30522),n(79665),n(98351),n(98837),n(95767),n(91181),n(56997),n(96253),n(27476),n(19371),n(20075);function e(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,r){if(!t)return;if("string"==typeof t)return o(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(t,r)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}function c(t,r){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),n.push.apply(n,e)}return n}function a(t){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){u(t,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))}))}return t}function u(t,r,n){return r in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t}var i=function(t){return null==t?void 0:t.sort((function(t,r){return t.y-r.y})).reduce((function(t,r){var n="".concat(Math.floor(r.y));if(t[n]){var o=t[n];return a(a({},t),{},u({},n,[].concat(e(o),[r])))}return a(a({},t),{},u({},n,[r]))}),{})},f=function(t){return null==t?void 0:t.map((function(r,n){var e=r.w,o=0===n?r.x:t[n].x-(t[n-1].x+t[n-1].w);return r.componentStr&&r.componentStr.length?"\n    <Col \n      span={".concat(e,"}\n      offset={").concat(o,"}\n    >\n      ").concat(r.componentStr,"\n    </Col>\n"):"\n    <Col \n      span={".concat(e,"}\n      offset={").concat(o,"}\n    />\n")}))}}}]);